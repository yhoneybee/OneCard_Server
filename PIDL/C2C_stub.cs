




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;
using Nettention.Proud;

namespace C2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool TurnChangedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public TurnChangedDelegate TurnChanged = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool TurnDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID turn);  
		public TurnDelegate Turn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID turn)
		{ 
			return false;
		};
		public delegate bool DrawDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID target, int count);  
		public DrawDelegate Draw = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID target, int count)
		{ 
			return false;
		};
		public delegate bool InvalidDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public InvalidDelegate Invalid = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool JumpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster);  
		public JumpDelegate Jump = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster)
		{ 
			return false;
		};
		public delegate bool ReverseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster);  
		public ReverseDelegate Reverse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster)
		{ 
			return false;
		};
		public delegate bool ChangeColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool black);  
		public ChangeColorDelegate ChangeColor = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool black)
		{ 
			return false;
		};
		public delegate bool TimerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float time);  
		public TimerDelegate Timer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float time)
		{ 
			return false;
		};
		public delegate bool RankDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int rank);  
		public RankDelegate Rank = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int rank)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.TurnChanged:
            ProcessReceivedMessage_TurnChanged(__msg, pa, hostTag, remote);
            break;
        case Common.Turn:
            ProcessReceivedMessage_Turn(__msg, pa, hostTag, remote);
            break;
        case Common.Draw:
            ProcessReceivedMessage_Draw(__msg, pa, hostTag, remote);
            break;
        case Common.Invalid:
            ProcessReceivedMessage_Invalid(__msg, pa, hostTag, remote);
            break;
        case Common.Jump:
            ProcessReceivedMessage_Jump(__msg, pa, hostTag, remote);
            break;
        case Common.Reverse:
            ProcessReceivedMessage_Reverse(__msg, pa, hostTag, remote);
            break;
        case Common.ChangeColor:
            ProcessReceivedMessage_ChangeColor(__msg, pa, hostTag, remote);
            break;
        case Common.Timer:
            ProcessReceivedMessage_Timer(__msg, pa, hostTag, remote);
            break;
        case Common.Rank:
            ProcessReceivedMessage_Rank(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_TurnChanged(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_TurnChanged);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.TurnChanged, RmiName_TurnChanged,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TurnChanged;
        summary.rmiName = RmiName_TurnChanged;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TurnChanged (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TurnChanged);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TurnChanged;
        summary.rmiName = RmiName_TurnChanged;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Turn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        HostID turn; Nettention.Proud.Marshaler.Read(__msg,out turn);	
core.PostCheckReadMessage(__msg, RmiName_Turn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=turn.ToString()+",";
        NotifyCallFromStub(Common.Turn, RmiName_Turn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Turn;
        summary.rmiName = RmiName_Turn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Turn (remote,ctx , turn );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Turn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Turn;
        summary.rmiName = RmiName_Turn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Draw(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        HostID target; Nettention.Proud.Marshaler.Read(__msg,out target);	
int count; Nettention.Proud.Marshaler.Read(__msg,out count);	
core.PostCheckReadMessage(__msg, RmiName_Draw);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=target.ToString()+",";
parameterString+=count.ToString()+",";
        NotifyCallFromStub(Common.Draw, RmiName_Draw,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Draw;
        summary.rmiName = RmiName_Draw;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Draw (remote,ctx , target, count );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Draw);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Draw;
        summary.rmiName = RmiName_Draw;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Invalid(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_Invalid);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.Invalid, RmiName_Invalid,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Invalid;
        summary.rmiName = RmiName_Invalid;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Invalid (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Invalid);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Invalid;
        summary.rmiName = RmiName_Invalid;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Jump(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        HostID caster; Nettention.Proud.Marshaler.Read(__msg,out caster);	
core.PostCheckReadMessage(__msg, RmiName_Jump);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=caster.ToString()+",";
        NotifyCallFromStub(Common.Jump, RmiName_Jump,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Jump;
        summary.rmiName = RmiName_Jump;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Jump (remote,ctx , caster );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Jump);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Jump;
        summary.rmiName = RmiName_Jump;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Reverse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        HostID caster; Nettention.Proud.Marshaler.Read(__msg,out caster);	
core.PostCheckReadMessage(__msg, RmiName_Reverse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=caster.ToString()+",";
        NotifyCallFromStub(Common.Reverse, RmiName_Reverse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Reverse;
        summary.rmiName = RmiName_Reverse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Reverse (remote,ctx , caster );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Reverse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Reverse;
        summary.rmiName = RmiName_Reverse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangeColor(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool black; Nettention.Proud.Marshaler.Read(__msg,out black);	
core.PostCheckReadMessage(__msg, RmiName_ChangeColor);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=black.ToString()+",";
        NotifyCallFromStub(Common.ChangeColor, RmiName_ChangeColor,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangeColor;
        summary.rmiName = RmiName_ChangeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangeColor (remote,ctx , black );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangeColor);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangeColor;
        summary.rmiName = RmiName_ChangeColor;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Timer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        float time; Nettention.Proud.Marshaler.Read(__msg,out time);	
core.PostCheckReadMessage(__msg, RmiName_Timer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=time.ToString()+",";
        NotifyCallFromStub(Common.Timer, RmiName_Timer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Timer;
        summary.rmiName = RmiName_Timer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Timer (remote,ctx , time );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Timer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Timer;
        summary.rmiName = RmiName_Timer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Rank(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int rank; Nettention.Proud.Marshaler.Read(__msg,out rank);	
core.PostCheckReadMessage(__msg, RmiName_Rank);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=rank.ToString()+",";
        NotifyCallFromStub(Common.Rank, RmiName_Rank,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Rank;
        summary.rmiName = RmiName_Rank;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Rank (remote,ctx , rank );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Rank);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Rank;
        summary.rmiName = RmiName_Rank;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_TurnChanged="TurnChanged";
public const string RmiName_Turn="Turn";
public const string RmiName_Draw="Draw";
public const string RmiName_Invalid="Invalid";
public const string RmiName_Jump="Jump";
public const string RmiName_Reverse="Reverse";
public const string RmiName_ChangeColor="ChangeColor";
public const string RmiName_Timer="Timer";
public const string RmiName_Rank="Rank";
       
public const string RmiName_First = RmiName_TurnChanged;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_TurnChanged="";
public const string RmiName_Turn="";
public const string RmiName_Draw="";
public const string RmiName_Invalid="";
public const string RmiName_Jump="";
public const string RmiName_Reverse="";
public const string RmiName_ChangeColor="";
public const string RmiName_Timer="";
public const string RmiName_Rank="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

