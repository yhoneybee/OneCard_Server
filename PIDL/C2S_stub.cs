




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;
using Nettention.Proud;

namespace C2S
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RoomCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name, int pw, int max_player);  
		public RoomCreateDelegate RoomCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name, int pw, int max_player)
		{ 
			return false;
		};
		public delegate bool JoinRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name, int pw);  
		public JoinRoomDelegate JoinRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name, int pw)
		{ 
			return false;
		};
		public delegate bool LeaveRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name);  
		public LeaveRoomDelegate LeaveRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name)
		{ 
			return false;
		};
		public delegate bool GameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name);  
		public GameStartDelegate GameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string room_name)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RoomCreate:
            ProcessReceivedMessage_RoomCreate(__msg, pa, hostTag, remote);
            break;
        case Common.JoinRoom:
            ProcessReceivedMessage_JoinRoom(__msg, pa, hostTag, remote);
            break;
        case Common.LeaveRoom:
            ProcessReceivedMessage_LeaveRoom(__msg, pa, hostTag, remote);
            break;
        case Common.GameStart:
            ProcessReceivedMessage_GameStart(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RoomCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string room_name; Nettention.Proud.Marshaler.Read(__msg,out room_name);	
int pw; Nettention.Proud.Marshaler.Read(__msg,out pw);	
int max_player; Nettention.Proud.Marshaler.Read(__msg,out max_player);	
core.PostCheckReadMessage(__msg, RmiName_RoomCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room_name.ToString()+",";
parameterString+=pw.ToString()+",";
parameterString+=max_player.ToString()+",";
        NotifyCallFromStub(Common.RoomCreate, RmiName_RoomCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RoomCreate;
        summary.rmiName = RmiName_RoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RoomCreate (remote,ctx , room_name, pw, max_player );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RoomCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RoomCreate;
        summary.rmiName = RmiName_RoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_JoinRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string room_name; Nettention.Proud.Marshaler.Read(__msg,out room_name);	
int pw; Nettention.Proud.Marshaler.Read(__msg,out pw);	
core.PostCheckReadMessage(__msg, RmiName_JoinRoom);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room_name.ToString()+",";
parameterString+=pw.ToString()+",";
        NotifyCallFromStub(Common.JoinRoom, RmiName_JoinRoom,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.JoinRoom;
        summary.rmiName = RmiName_JoinRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =JoinRoom (remote,ctx , room_name, pw );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_JoinRoom);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.JoinRoom;
        summary.rmiName = RmiName_JoinRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LeaveRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string room_name; Nettention.Proud.Marshaler.Read(__msg,out room_name);	
core.PostCheckReadMessage(__msg, RmiName_LeaveRoom);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room_name.ToString()+",";
        NotifyCallFromStub(Common.LeaveRoom, RmiName_LeaveRoom,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LeaveRoom;
        summary.rmiName = RmiName_LeaveRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LeaveRoom (remote,ctx , room_name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LeaveRoom);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LeaveRoom;
        summary.rmiName = RmiName_LeaveRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string room_name; Nettention.Proud.Marshaler.Read(__msg,out room_name);	
core.PostCheckReadMessage(__msg, RmiName_GameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=room_name.ToString()+",";
        NotifyCallFromStub(Common.GameStart, RmiName_GameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GameStart;
        summary.rmiName = RmiName_GameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GameStart (remote,ctx , room_name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GameStart;
        summary.rmiName = RmiName_GameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RoomCreate="RoomCreate";
public const string RmiName_JoinRoom="JoinRoom";
public const string RmiName_LeaveRoom="LeaveRoom";
public const string RmiName_GameStart="GameStart";
       
public const string RmiName_First = RmiName_RoomCreate;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RoomCreate="";
public const string RmiName_JoinRoom="";
public const string RmiName_LeaveRoom="";
public const string RmiName_GameStart="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

