




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;
using Nettention.Proud;

namespace C2C
{
	public class Proxy:Nettention.Proud.RmiProxy
	{
public bool TurnChanged(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.TurnChanged;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_TurnChanged, Common.TurnChanged);
}

public bool TurnChanged(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.TurnChanged;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_TurnChanged, Common.TurnChanged);
}
public bool Turn(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID turn)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Turn;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, turn);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Turn, Common.Turn);
}

public bool Turn(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, HostID turn)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Turn;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, turn);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Turn, Common.Turn);
}
public bool Draw(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID target, int count)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Draw;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, target);
		Nettention.Proud.Marshaler.Write(__msg, count);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Draw, Common.Draw);
}

public bool Draw(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, HostID target, int count)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Draw;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, target);
Nettention.Proud.Marshaler.Write(__msg, count);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Draw, Common.Draw);
}
public bool Invalid(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Invalid;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Invalid, Common.Invalid);
}

public bool Invalid(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Invalid;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Invalid, Common.Invalid);
}
public bool Jump(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Jump;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, caster);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Jump, Common.Jump);
}

public bool Jump(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, HostID caster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Jump;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, caster);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Jump, Common.Jump);
}
public bool Reverse(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, HostID caster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Reverse;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, caster);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Reverse, Common.Reverse);
}

public bool Reverse(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, HostID caster)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Reverse;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, caster);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Reverse, Common.Reverse);
}
public bool ChangeColor(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool black)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ChangeColor;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, black);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ChangeColor, Common.ChangeColor);
}

public bool ChangeColor(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool black)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ChangeColor;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, black);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ChangeColor, Common.ChangeColor);
}
public bool Timer(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float time)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Timer;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, time);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Timer, Common.Timer);
}

public bool Timer(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float time)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Timer;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, time);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Timer, Common.Timer);
}
public bool Rank(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int rank)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Rank;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, rank);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Rank, Common.Rank);
}

public bool Rank(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int rank)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Rank;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, rank);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Rank, Common.Rank);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_TurnChanged="TurnChanged";
public const string RmiName_Turn="Turn";
public const string RmiName_Draw="Draw";
public const string RmiName_Invalid="Invalid";
public const string RmiName_Jump="Jump";
public const string RmiName_Reverse="Reverse";
public const string RmiName_ChangeColor="ChangeColor";
public const string RmiName_Timer="Timer";
public const string RmiName_Rank="Rank";
       
public const string RmiName_First = RmiName_TurnChanged;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_TurnChanged="";
public const string RmiName_Turn="";
public const string RmiName_Draw="";
public const string RmiName_Invalid="";
public const string RmiName_Jump="";
public const string RmiName_Reverse="";
public const string RmiName_ChangeColor="";
public const string RmiName_Timer="";
public const string RmiName_Rank="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

